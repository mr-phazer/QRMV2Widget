#pragma once

#include <d3d11.h>
#include <DirectXMath.h>
#include "..\DirectXTK\Inc\SimpleMath.h"

const D3D11_INPUT_ELEMENT_DESC layout_Simple[] =
{
{ "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT,
		0, D3D11_APPEND_ALIGNED_ELEMENT , D3D11_INPUT_PER_VERTEX_DATA, 0 },
};

struct ModelVertex
{
	DirectX::SimpleMath::Vector3 position;
	DirectX::XMFLOAT2 uv;
	//TODO: add another UV map

	DirectX::SimpleMath::Vector3 normal;
	DirectX::SimpleMath::Vector3 tangent;
	DirectX::SimpleMath::Vector3 bitangent;

	DirectX::XMFLOAT4 bone_weights;
	DirectX::XMUINT4 bone_indices;

	DirectX::SimpleMath::Color color;

	//float4 bin : TEXCOORD1;
};

const D3D11_INPUT_ELEMENT_DESC layout_Weighted4[] =
{
	{ "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT,
	0, D3D11_APPEND_ALIGNED_ELEMENT , D3D11_INPUT_PER_VERTEX_DATA, 0 },

	{ "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT,
	0, D3D11_APPEND_ALIGNED_ELEMENT , D3D11_INPUT_PER_VERTEX_DATA, 0 },

	{ "NORMAL", 0, DXGI_FORMAT_R32G32B32_FLOAT,
	0, D3D11_APPEND_ALIGNED_ELEMENT , D3D11_INPUT_PER_VERTEX_DATA, 0 },

	{ "TANGENT", 0, DXGI_FORMAT_R32G32B32_FLOAT,
	0, D3D11_APPEND_ALIGNED_ELEMENT , D3D11_INPUT_PER_VERTEX_DATA, 0 },

	{ "BINORMAL", 0, DXGI_FORMAT_R32G32B32_FLOAT,
	0, D3D11_APPEND_ALIGNED_ELEMENT , D3D11_INPUT_PER_VERTEX_DATA, 0 },

	{ "BLENDWEIGHTS", 0, DXGI_FORMAT_R32G32B32A32_FLOAT,
	0, D3D11_APPEND_ALIGNED_ELEMENT , D3D11_INPUT_PER_VERTEX_DATA, 0 },

	{ "BLENDINDICES", 0, DXGI_FORMAT_R32G32B32A32_UINT,
	0, D3D11_APPEND_ALIGNED_ELEMENT , D3D11_INPUT_PER_VERTEX_DATA, 0 },

	{ "COLOR", 0, DXGI_FORMAT_R32G32B32A32_FLOAT,
	0, D3D11_APPEND_ALIGNED_ELEMENT , D3D11_INPUT_PER_VERTEX_DATA, 0 }
};
